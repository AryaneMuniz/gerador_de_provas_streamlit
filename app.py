import streamlit as st
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import date
from io import BytesIO

st.set_page_config(page_title="Gerador de Provas", layout="centered")
st.title("üìù Gerador de Provas Escolares")

# Inicializa o estado da sess√£o
if "questoes" not in st.session_state:
    st.session_state.questoes = []

# --- Cabe√ßalho da escola ---
st.sidebar.header("Configura√ß√µes do Cabe√ßalho")
logo_escola = st.sidebar.file_uploader("üìå Logo da Escola", type=["png", "jpg", "jpeg"])

# --- Dados da prova ---
with st.form("form_dados"):
    st.subheader("üìò Dados da Prova")
    nome_escola = st.text_input("Nome da Escola")
    nome_professor = st.text_input("Nome do Professor")
    disciplina = st.text_input("Disciplina")
    serie = st.selectbox("S√©rie/Turma", [
        "1¬∫ ano - Ensino Fundamental", "2¬∫ ano - Ensino Fundamental", 
        "3¬∫ ano - Ensino Fundamental", "4¬∫ ano - Ensino Fundamental",
        "5¬∫ ano - Ensino Fundamental", "6¬∫ ano - Ensino Fundamental",
        "7¬∫ ano - Ensino Fundamental", "8¬∫ ano - Ensino Fundamental",
        "9¬∫ ano - Ensino Fundamental", "1¬∫ ano - Ensino M√©dio",
        "2¬∫ ano - Ensino M√©dio", "3¬∫ ano - Ensino M√©dio"
    ])
    bimestre = st.selectbox("Bimestre", ["1¬∫ Bimestre", "2¬∫ Bimestre", "3¬∫ Bimestre", "4¬∫ Bimestre"])
    data_prova = st.date_input("Data da Prova", value=date.today())
    st.form_submit_button("Salvar Dados")

# --- Adicionar Quest√£o ---
st.subheader("‚ûï Adicionar Quest√£o")

with st.form("form_questao", clear_on_submit=True):
    tipo = st.radio("Tipo de Quest√£o", ["Dissertativa", "M√∫ltipla Escolha"], horizontal=True, key="tipo_questao")
    texto = st.text_area("Texto da Quest√£o", height=150, key="texto_questao")
    imagem = st.file_uploader("Imagem (opcional)", type=["png", "jpg", "jpeg"], key="imagem_questao")

    # Op√ß√µes de m√∫ltipla escolha (s√≥ aparece se o tipo for M√∫ltipla Escolha)
    if tipo == "M√∫ltipla Escolha":
        st.write("Op√ß√µes de resposta:")
        col1, col2 = st.columns(2)
        with col1:
            opcao_a = st.text_input("Op√ß√£o A", value="", key="opt_a")
            opcao_c = st.text_input("Op√ß√£o C", value="", key="opt_c")
        with col2:
            opcao_b = st.text_input("Op√ß√£o B", value="", key="opt_b")
            opcao_d = st.text_input("Op√ß√£o D", value="", key="opt_d")
        opcoes = {'A': opcao_a, 'B': opcao_b, 'C': opcao_c, 'D': opcao_d}
    else:
        opcoes = None

    submitted = st.form_submit_button("Adicionar Quest√£o")

    if submitted:
        if not texto.strip():
            st.warning("Por favor, escreva o texto da quest√£o.")
        elif tipo == "M√∫ltipla Escolha" and any(v.strip() == "" for v in opcoes.values()):
            st.warning("Preencha todas as op√ß√µes da m√∫ltipla escolha.")
        else:
            nova_questao = {
                "texto": texto,
                "tipo": tipo,
                "imagem": imagem.read() if imagem else None,
                "opcoes": opcoes if tipo == "M√∫ltipla Escolha" else None
            }
            st.session_state.questoes.append(nova_questao)
            st.success("Quest√£o adicionada com sucesso!")
            st.rerun()

# --- Lista de Quest√µes ---
st.subheader("üìã Quest√µes Adicionadas")

if not st.session_state.questoes:
    st.info("Nenhuma quest√£o adicionada ainda.")
else:
    for i, q in enumerate(st.session_state.questoes, 1):
        with st.container(border=True):
            st.markdown(f"**{i}. {q['texto']}**")
            if q["imagem"]:
                st.image(BytesIO(q["imagem"]), width=350)
            if q["tipo"] == "M√∫ltipla Escolha":
                st.write(f"A) {q['opcoes']['A']}")
                st.write(f"B) {q['opcoes']['B']}")
                st.write(f"C) {q['opcoes']['C']}")
                st.write(f"D) {q['opcoes']['D']}")
            else:
                st.markdown("_" * 60)

            if st.button(f"üóëÔ∏è Excluir Quest√£o {i}", key=f"del_{i}"):
                st.session_state.questoes.pop(i-1)
                st.rerun()

# --- Exportar para Word ---
st.subheader("üì§ Exportar Prova")

if st.button("üíæ Gerar Documento Word"):
    if not st.session_state.questoes:
        st.error("Adicione ao menos uma quest√£o antes de exportar.")
    else:
        doc = Document()
        style = doc.styles['Normal']
        style.font.name = 'Arial'
        style.font.size = Pt(12)

        # Cabe√ßalho com logo
        if logo_escola:
            logo_escola.seek(0)
            doc.add_picture(logo_escola, width=Inches(1.5))
            doc.paragraphs[-1].alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Informa√ß√µes da prova
        doc.add_paragraph(nome_escola, style='Heading 1').alignment = WD_ALIGN_PARAGRAPH.CENTER
        doc.add_paragraph()
        doc.add_paragraph(f"Disciplina: {disciplina}").bold = True
        doc.add_paragraph(f"Professor: {nome_professor}")
        doc.add_paragraph(f"Turma: {serie}")
        doc.add_paragraph(f"Bimestre: {bimestre}")
        doc.add_paragraph(f"Data: {data_prova.strftime('%d/%m/%Y')}")
        doc.add_paragraph()
        doc.add_paragraph("Prova Escrita").bold = True
        doc.add_paragraph()

        # Adicionar quest√µes
        for i, q in enumerate(st.session_state.questoes, 1):
            doc.add_paragraph(f"{i}. {q['texto']}")
            if q["imagem"]:
                try:
                    doc.add_picture(BytesIO(q["imagem"]), width=Inches(4.5))
                    doc.paragraphs[-1].alignment = WD_ALIGN_PARAGRAPH.CENTER
                except:
                    doc.add_paragraph("[Erro ao carregar imagem]")
            if q["tipo"] == "M√∫ltipla Escolha":
                doc.add_paragraph(f"A) {q['opcoes']['A']}")
                doc.add_paragraph(f"B) {q['opcoes']['B']}")
                doc.add_paragraph(f"C) {q['opcoes']['C']}")
                doc.add_paragraph(f"D) {q['opcoes']['D']}")
            else:
                for _ in range(5):  # Linhas para resposta dissertativa
                    doc.add_paragraph("_" * 80)
            doc.add_paragraph()

        # Salvar documento
        nome_arquivo = f"Prova_{disciplina}_{serie}_{bimestre}.docx".replace(" ", "_")
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)

        st.download_button(
            label="‚¨áÔ∏è Baixar Prova",
            data=buffer,
            file_name=nome_arquivo,
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
