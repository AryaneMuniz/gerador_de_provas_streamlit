import streamlit as st
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement
from docx.oxml.ns import qn
from datetime import date
import os

# Fun√ß√£o para garantir que a pasta 'temp' exista
def criar_pasta_temp():
    if not os.path.exists("temp"):
        os.makedirs("temp")

# Configura√ß√£o do t√≠tulo da p√°gina
st.set_page_config(page_title="Gerador de Provas", layout="centered")
st.title("üìù Gerador de Provas Escolares")

# Upload do logo (opcional)
logo_escola = st.file_uploader(
    "üî≥ Carregar logo da escola (opcional)", 
    type=["png", "jpg", "jpeg"],
    help="Fa√ßa upload do logo para aparecer no cabe√ßalho da prova."
)

# Campos principais
nome_professor = st.text_input("Nome do Professor")
disciplina = st.text_input("Disciplina")
serie = st.selectbox(
    "S√©rie/Turma",
    [
        "1¬∫ ano - Ensino Fundamental", "2¬∫ ano - Ensino Fundamental", "3¬∫ ano - Ensino Fundamental",
        "4¬∫ ano - Ensino Fundamental", "5¬∫ ano - Ensino Fundamental", "6¬∫ ano - Ensino Fundamental",
        "7¬∫ ano - Ensino Fundamental", "8¬∫ ano - Ensino Fundamental", "9¬∫ ano - Ensino Fundamental",
        "1¬∫ ano - Ensino M√©dio", "2¬∫ ano - Ensino M√©dio", "3¬∫ ano - Ensino M√©dio"
    ]
)
bimestre = st.selectbox("Bimestre", ["1¬∫ Bimestre", "2¬∫ Bimestre", "3¬∫ Bimestre", "4¬∫ Bimestre"])
data_prova = st.date_input("Data da Prova", value=date.today())

# Lista de quest√µes
if "questoes" not in st.session_state:
    st.session_state.questoes = []

st.subheader("‚úçÔ∏è Quest√µes")

# Sele√ß√£o de tipo de quest√£o
tipo_questao = st.selectbox(
    "Selecione o tipo de quest√£o:",
    ["Dissertativa", "M√∫ltipla Escolha"]
)

# Adicionar nova quest√£o
nova_questao = st.text_area("Digite a nova quest√£o")
imagem_questao = st.file_uploader("Escolha uma imagem para a quest√£o (opcional)", type=["jpg", "jpeg", "png"])

if tipo_questao == "M√∫ltipla Escolha":
    opcao_a = st.text_input("Op√ß√£o A")
    opcao_b = st.text_input("Op√ß√£o B")
    opcao_c = st.text_input("Op√ß√£o C")
    opcao_d = st.text_input("Op√ß√£o D")
    resposta_correta = st.selectbox("Selecione a resposta correta:", ["A", "B", "C", "D"])
else:
    opcao_a = opcao_b = opcao_c = opcao_d = resposta_correta = None

if st.button("‚ûï Adicionar quest√£o"):
    if nova_questao.strip() != "":
        if tipo_questao == "M√∫ltipla Escolha" and (opcao_a and opcao_b and opcao_c and opcao_d):
            questao = f"{nova_questao}\nA) {opcao_a}\nB) {opcao_b}\nC) {opcao_c}\nD) {opcao_d}\nResposta correta: {resposta_correta}"
        else:
            questao = nova_questao
        
        if imagem_questao:
            criar_pasta_temp()
            imagem_path = os.path.join("temp", imagem_questao.name)
            with open(imagem_path, "wb") as f:
                f.write(imagem_questao.getbuffer())
            questao += f"\n[Imagem adicionada: {imagem_questao.name}]"
        
        st.session_state.questoes.append(questao.strip())
        st.success("Quest√£o adicionada com sucesso!")
    else:
        st.warning("Digite algo antes de adicionar.")

# Mostrar quest√µes j√° adicionadas
for i, q in enumerate(st.session_state.questoes):
    st.markdown(f"**{i+1}. {q}**")
    col1, col2 = st.columns(2)
    with col1:
        if st.button(f"‚úèÔ∏è Editar {i+1}", key=f"edit_{i}"):
            nova = st.text_area("Edite a quest√£o:", value=q, key=f"edit_input_{i}")
            if st.button(f"üíæ Salvar {i+1}", key=f"save_{i}"):
                st.session_state.questoes[i] = nova
                st.experimental_rerun()
    with col2:
        if st.button(f"‚ùå Remover {i+1}", key=f"remove_{i}"):
            st.session_state.questoes.pop(i)
            st.experimental_rerun()

# Gerar documento Word
st.subheader("üìÅ Gerar Arquivo Word")

if st.button("üì• Gerar prova em Word"):
    if not st.session_state.questoes:
        st.warning("‚ö†Ô∏è Adicione ao menos uma quest√£o antes de gerar a prova.")
    else:
        doc = Document()

        # ===== CONFIGURA√á√ÉO DO DOCUMENTO =====
        # Define a fonte padr√£o para Arial 12
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Arial'
        font.size = Pt(12)

        # Configura margens (2,5 cm em todos os lados)
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(1.0)  # 2,54 cm = 1 polegada
            section.bottom_margin = Inches(1.0)
            section.left_margin = Inches(1.0)
            section.right_margin = Inches(1.0)

        # ===== CABE√áALHO COM LOGO =====
        # Se um logo foi carregado, adiciona ao documento
        if logo_escola:
            criar_pasta_temp()
            logo_path = os.path.join("temp", logo_escola.name)
            with open(logo_path, "wb") as f:
                f.write(logo_escola.getbuffer())
            
            # Adiciona o logo (ajustado para largura m√°xima de 3 polegadas)
            doc.add_picture(logo_path, width=Inches(1.5))  # Ajuste o tamanho conforme necess√°rio
            last_paragraph = doc.paragraphs[-1]
            last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
            doc.add_paragraph()  # Espa√ßo ap√≥s o logo

        # T√≠tulo centralizado em negrito e tamanho 14
        titulo = doc.add_heading(f"PROVA DE {disciplina.upper()} ‚Äì {bimestre.upper()}", level=0)
        titulo.alignment = WD_ALIGN_PARAGRAPH.CENTER
        titulo_format = titulo.runs[0]
        titulo_format.bold = True
        titulo_format.font.size = Pt(14)

        # Adiciona informa√ß√µes da prova
        info_prova = [
            f"Professor: {nome_professor}",
            f"Disciplina: {disciplina}",
            f"S√©rie/Turma: {serie}",
            f"Bimestre: {bimestre}",
            f"Data: {data_prova.strftime('%d/%m/%Y')}"
        ]

        for info in info_prova:
            p = doc.add_paragraph(info)
            p.paragraph_format.space_after = Pt(6)  # Espa√ßamento entre linhas

        doc.add_paragraph(" ")  # Espa√ßo extra antes das quest√µes

        # ===== QUEST√ïES =====
        for i, questao in enumerate(st.session_state.questoes, 1):
            if "[Imagem adicionada:" in questao:
                # Separa o texto da imagem
                texto_questao, imagem_nome = questao.split("[Imagem adicionada:")
                texto_questao = texto_questao.strip()
                imagem_nome = imagem_nome.replace("]", "").strip()
                imagem_path = os.path.join("temp", imagem_nome)
                
                # Adiciona o texto da quest√£o
                p = doc.add_paragraph(f"{i}. {texto_questao}")
                p.paragraph_format.space_after = Pt(12)  # Espa√ßamento maior ap√≥s quest√£o
                
                # Adiciona a imagem centralizada
                try:
                    doc.add_picture(imagem_path, width=Inches(4.0))
                    last_paragraph = doc.paragraphs[-1]
                    last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                except Exception as e:
                    st.error(f"Erro ao adicionar a imagem: {e}")
            else:
                p = doc.add_paragraph(f"{i}. {questao}")
                p.paragraph_format.space_after = Pt(12)  # Espa√ßamento entre quest√µes

        # Salva o arquivo
        nome_arquivo = f"prova_{disciplina.upper()}_{serie} ({bimestre}).docx"
        doc.save(nome_arquivo)

        # Bot√£o para download
        with open(nome_arquivo, "rb") as file:
            st.download_button(
                label="üì• Baixar Prova",
                data=file,
                file_name=nome_arquivo,
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
